{"version":3,"sources":["config.js","App.js","Redirect.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","endpoints","URL","axios","require","endpoint","default","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","originalUrl","shortUrl","handleChange","bind","assertThisInitialized","onCreate","onInfo","onDelete","event","_this2","put","Url","then","response","setState","data","tinyUrl","catch","error","alert","_this3","post","_this4","method","url","_","target","value","react_default","a","createElement","className","type","onChange","id","onClick","href","Component","Redirect","params","match","window","location","React","Boolean","hostname","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b13a4d81.chunk.js","sourcesContent":["const endpoints = {\n    URL: 'http://localhost:9000'\n    //URL: ' http://192.168.99.100:30001'\n}\n\nexport default endpoints;\n","import React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios')\nconst endpoint = require('./config').default\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      originalUrl: 'http://www.example.con',\n      shortUrl: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onCreate = this.onCreate.bind(this);\n    this.onInfo = this.onInfo.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n \n  onCreate(event) {\n     axios.put(endpoint.URL + '/engine', {\n      Url: this.state.originalUrl\n    }).then(response => {\n      this.setState ({ shortUrl: response.data.tinyUrl })\n    }).catch (error => { \n      alert(error)\n    })\n  }\n\n  onInfo(event) {\n    axios.post(endpoint.URL + '/engine', {\n      Url: this.state.originalUrl\n    }).then(response => {\n      this.setState ({ shortUrl: response.data.originalUrl })\n    }).catch (error => { \n      alert(error)\n    })\n  }\n\n  onDelete(event) {\n    axios({\n      method: 'DELETE',\n      url: endpoint.URL + '/engine', \n      data:{\n      Url: this.state.originalUrl\n      }\n    }).then(_ => {\n      this.setState ({ shortUrl: '' })\n    }).catch (error => { \n      alert(error)\n    })\n  }\n\n handleChange(event) {\n    this.setState({ originalUrl: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Yet Another Shortener Engine\n        </header>\n        <div className=\"App-body\">\n            <span className=\"App-label\">Insert URL</span>\n            <span>\n                <input type=\"text\" \n                   className=\"App-text\"\n                   value={this.state.originalUrl} \n                   onChange={this.handleChange} >\n                </input>\n            </span>\n            <div>\n              <span>\n                  <button id=\"create\" \n                      className=\"App-button\" \n                      onClick={this.onCreate}>Create\n                  </button>\n                  <button id=\"info\" \n                      className=\"App-button\" \n                      onClick={this.onInfo}>Info\n                  </button>\n                  <button id=\"delete\" \n                      className=\"App-button\" \n                      onClick={this.onDelete}>Delete\n                  </button>\n              </span>\n            </div>\n            <div className=\"App-label\">\n                <a href={this.state.shortUrl}>{this.state.shortUrl}</a>\n            </div>\n        </div>\n        <footer className=\"App-footer\">\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nconst axios = require('axios')\nconst endpoint = require('./config').default\n\n\nclass Redirect extends React.Component {\n    render() {\n      const { params } = this.props.match\n\n      axios.post(endpoint.URL + '/engine', {\n        Url: 'http://base.com/' + params.id\n      }).then(response => {\n        window.location = response.data.originalUrl\n      }).catch (error => { alert(error)})\n      return (\n        <div>\n        </div>\n      )\n    }\n  }\n  export default Redirect;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Redirect from './Redirect';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/:id\" component={Redirect} />\n      </div>\n    </Router>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}